'use client';
import { useState } from 'react';
import { createClient } from '@/lib/supabase-client';
import { useRouter } from 'next/navigation';

export default function BulkRegisterPage() {
  const router = useRouter();
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [step, setStep] = useState(1);
  const [extractedItems, setExtractedItems] = useState([]);

  const handleFileChange = (e) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile) {
      setFile(selectedFile);
      if (selectedFile.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onloadend = () => setPreview(reader.result);
        reader.readAsDataURL(selectedFile);
      }
    }
  };

  const handleUpload = async () => {
    if (!file) {
      setError('ファイルを選択してください');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/extract-invoice', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) throw new Error('AI解析に失敗しました');

      const result = await response.json();
      setExtractedItems(result.items || []);
      setStep(2);
    } catch (err) {
      setError(err.message || 'ファイルの処理に失敗しました');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveAll = async () => {
    setLoading(true);
    try {
      const supabase = createClient();
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('ログインしてください');

      const itemsToInsert = extractedItems.map(item => ({
        category: item.category || '',
        product_name: item.product_name || '',
        manufacturer: item.manufacturer || null,
        model_number: item.model_number || null,
        color: item.color || null,
        serial_number: item.serial_number || null,
        retail_price: item.retail_price || null,
        purchase_price: item.purchase_price || null,
        purchase_date: item.purchase_date || null,
        supplier_name: item.supplier_name || null,
        status: 'available',
        created_by: user.id,
      }));

      const { error } = await supabase.from('inventory').insert(itemsToInsert);
      if (error) throw error;

      alert(`${extractedItems.length}件の商品を登録しました！`);
      router.push('/inventory');
    } catch (err) {
      setError(err.message || '保存に失敗しました');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-4 px-4">
      <div className="max-w-4xl mx-auto">
        <div className="mb-6">
          <button onClick={() => router.back()} className="text-blue-600 hover:text-blue-700 mb-4">
            ← 戻る
          </button>
          <h1 className="text-3xl font-bold text-gray-900">📷 一括登録（AI読取）</h1>
          <p className="mt-2 text-sm text-gray-600">請求書をアップロードして自動読取</p>
        </div>

        {step === 1 && (
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold mb-4">ステップ1: ファイルアップロード</h2>
            
            {error && (
              <div className="mb-4 rounded-md bg-red-50 p-4">
                <p className="text-sm text-red-800">{error}</p>
              </div>
            )}

            <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
              {preview ? (
                <div className="mb-4">
                  <img src={preview} alt="Preview" className="max-h-64 mx-auto rounded" />
                </div>
              ) : (
                <div className="text-6xl mb-4">📄</div>
              )}
              
              <label className="cursor-pointer inline-flex items-center px-6 py-3 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                📁 ファイルを選択
                <input
                  type="file"
                  accept="image/*,application/pdf"
                  capture="environment"
                  onChange={handleFileChange}
                  className="sr-only"
                />
              </label>
              
              {file && (
                <p className="mt-4 text-sm text-gray-600">
                  選択中: {file.name}
                </p>
              )}
              
              <p className="mt-2 text-xs text-gray-500">
                PDF、画像ファイル対応 | スマホカメラでも撮影可能
              </p>
            </div>

            <div className="mt-6">
              <button
                onClick={handleUpload}
                disabled={!file || loading}
                className="w-full py-3 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'AI解析中...' : '次へ（AI解析）'}
              </button>
            </div>

            <div className="mt-4 p-4 bg-yellow-50 rounded-lg">
              <p className="text-sm text-yellow-800">
                ⚠️ 現在、AI機能はAPIキー設定が必要です。テストデータで進める場合は、次のステップで手動入力できます。
              </p>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold mb-4">ステップ2: 確認・編集</h2>
            
            {extractedItems.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-600 mb-4">商品が検出されませんでした</p>
                <button
                  onClick={() => setStep(1)}
                  className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                >
                  戻る
                </button>
              </div>
            ) : (
              <>
                <p className="mb-4 text-sm text-gray-600">
                  検出された商品: {extractedItems.length}件
                </p>
                
                <div className="space-y-4 mb-6">
                  {extractedItems.map((item, index) => (
                    <div key={index} className="border rounded-lg p-4">
                      <h3 className="font-semibold mb-2">商品 {index + 1}</h3>
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div>商品名: {item.product_name || '未入力'}</div>
                        <div>カテゴリ: {item.category || '未入力'}</div>
                        <div>メーカー: {item.manufacturer || '未入力'}</div>
                        <div>販売価格: {item.retail_price || '未入力'}</div>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="flex gap-4">
                  <button
                    onClick={() => setStep(1)}
                    className="flex-1 py-3 px-4 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                  >
                    戻る
                  </button>
                  <button
                    onClick={handleSaveAll}
                    disabled={loading}
                    className="flex-1 py-3 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                  >
                    {loading ? '保存中...' : `${extractedItems.length}件を保存`}
                  </button>
                </div>
              </>
            )}
          </div>
        )}
      </div>
    </div>
  );
}